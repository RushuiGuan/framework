using Albatross.Config.Core;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Serilog;
using System.Threading;
using System.Threading.Tasks;

namespace Albatross.Host.Worker {
	class Program {
		static Task Main(string[] args) {
			return new ServiceHost<MyHostedService>().RunAsync(args);
		}
	}

	public class MyHostedService : BackgroundService {
		private readonly ILogger<MyHostedService> logger;

		public MyHostedService(ILogger<MyHostedService> logger, ProgramSetting programSetting) {
			this.logger = logger;
			logger.LogInformation("{class} instance created", nameof(MyHostedService));
			logger.LogInformation("Running {program}, environment: {environment}, service manager: {manager}", programSetting.App, programSetting.Environment, programSetting.ServiceManager);
		}

		protected override async Task ExecuteAsync(CancellationToken cancellationToken) {
			while (true) {
				await Task.Delay(1000);
				if (cancellationToken.IsCancellationRequested) {
					logger.LogInformation("cancel requested");
					break;
				}
			}
		}
	}
}
