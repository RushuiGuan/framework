trigger:
- staging

pool:
  name: West Coast

variables:
- group: ci-variables
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: defaultNugetPattern
  value: src/**/*.Core.csproj;src/**/*.Proxy.csproj

steps:
- task: PowerShell@2
  displayName: 'Initilization'
  inputs:
    targetType: 'inline'
    script: |
      . $(Build.SourcesDirectory)/ci.ps1;
      Backup-DirectoryBuild;
      $version = Set-ReleaseVersion -branch '$(Build.SourceBranchName)' -build $(Build.BuildId)
      echo "release version: $version";
      $feed = Get-Feed -branch '$(Build.SourceBranchName)'
      echo "##vso[task.setvariable variable=feed]$feed"
      echo "using feed: $feed";

      if (-not $env:nugetPattern){
        echo "##vso[task.setvariable variable=nugetPattern]$(defaultNugetPattern)"
        echo "using nuget pattern: $(defaultNugetPattern)"
      } else{
        echo "using nuget pattern: $(nugetPattern)"
      }
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: $(solution)
    feedsToUse: 'select'
    vstsFeed: $(feed)
    verbosityRestore: Minimal

- task: DotNetCoreCLI@2
  condition: and(succeeded(), or(eq(variables['hasNuget'], 'true'), eq(variables['hasNuget'], '')))
  displayName: 'Pack'
  inputs:
    command: 'pack'
    verbosityPack: Minimal
    packagesToPack: $(nugetPattern)
    configuration: $(buildConfiguration)

- task: DotNetCoreCLI@2
  condition: and(succeeded(), or(eq(variables['hasNuget'], 'true'), eq(variables['hasNuget'], '')))
  displayName: 'Push Packages'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: $(feed)
    verbosityRestore: Minimal

- task: DotNetCoreCLI@2
  condition: and(succeeded(), or(eq(variables['hasApp'], 'true'), eq(variables['hasApp'], '')))
  displayName: 'Publish to artifact staging folder'
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: true
    arguments: '-o $(Build.ArtifactStagingDirectory)'
    verbosityRestore: Normal
    configuration: $(buildConfiguration)
    projects: |
      **/*.Admin.csproj
      **/*.Utility.csproj
      **/*.Api.csproj
      **/*.Controller.csproj
      **/*.Scheduler.csproj
      **/*.Worker.csproj

- task: PowerShell@2
  condition: and(succeeded(), or(eq(variables['hasApp'], 'true'), eq(variables['hasApp'], '')))
  displayName: 'Create zip file and publish to Octopus'
  env:
    OctopusApiKey: $(OctopusApiKey)
  inputs:
    targetType: 'inline'
    script: |
      . $(Build.SourcesDirectory)/ci.ps1;
      $version = Get-OctopusReleaseNumber -build $(Build.BuildId)
      Get-ChildItem $(Build.ArtifactStagingDirectory) -filter *.zip | foreach-object {
        $name = [System.IO.Path]::GetFileNameWithoutExtension($_.Name);
        Rename-Item $_.FullName -newName "$($name).$version.zip"
      }
      Get-ChildItem $(Build.ArtifactStagingDirectory) -filter *.zip | foreach-object {
        Send-Octopus -file $_.FullName -apiKey $env:OctopusApiKey
      }
